# Manylinux2010-derived image that will include Boost and versions of
# Boost.Python for all available Python versions.

ARG BOOST_DOWNLOADED_CONTAINER

# Download our boost base image.

# Docker throws a syntax error if we try to say
# FROM boost_downloaded:${BOOST_VERSION}
# ...so we just pass in the whole image name instead.
FROM ${BOOST_DOWNLOADED_CONTAINER}

ARG PYTHON_IMPLEMENTATION
ARG BOOST_VERSION_DOTS
ARG BOOST_VERSION_UNDERSCORES

ENV PYTHON_IMPLEMENTATION=${PYTHON_IMPLEMENTATION}
ENV BOOST_VERSION_DOTS=${BOOST_VERSION_DOTS}
ENV BOOST_VERSION_UNDERSCORES=${BOOST_VERSION_UNDERSCORES}

### ----------------------------------------------------------------------
###
### Step 1: Make sure Boost.Build will be able to find the include files
###

WORKDIR /opt/src
COPY make_python_include_symlink.sh .
RUN /opt/src/make_python_include_symlink.sh ${PYTHON_IMPLEMENTATION}

### ----------------------------------------------------------------------
###
### Step 2: Build and install Boost
###

# Build and install Boost and clean up after ourselves
WORKDIR /opt/src/boost_${BOOST_VERSION_UNDERSCORES}
RUN \
    ./bootstrap.sh --prefix=/usr/local --with-python=/opt/python/${PYTHON_IMPLEMENTATION}/bin/python \
    && ./b2 -j 4 -d0 install
WORKDIR /opt/src
RUN rm -rf boost_${BOOST_VERSION_UNDERSCORES}

# Since docker cp doesn't support wildcards, we'll just stash the libraries
# we care about in a directory we can pull wholesale
RUN mkdir /boost_python
WORKDIR /usr/local/lib
RUN tar cf /boost_python/boost_python_libraries.tar libboost_python* cmake/boost_python*

ENTRYPOINT [ "/bin/bash", "-l", "-c" ]

