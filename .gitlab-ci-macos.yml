########################
# MacOS CI/CD Pipeline #
########################

macos-setup:
  stage: setup
  tags:
    - macos
    - anaconda
  script:
    - ./ci/macos/configure_anaconda_environment.sh
    - mkdir build_macos
  artifacts:
    paths:
      - build_macos
    expire_in: 1 day

macos-configure:
  stage: configure
  tags:
    - macos
    - anaconda
  dependencies:
    - macos-setup
  needs:
    - job: macos-setup
      artifacts: true
  script:
    - ./ci/macos/configure_cmake_build.sh
  artifacts:
    paths:
      - build_macos
    expire_in: 1 day

macos-build:
  stage: build
  tags:
    - macos
    - anaconda
  dependencies:
    - macos-configure
  needs:
    - job: macos-configure
      artifacts: true
  script:
    - ./ci/macos/run_build.sh
  artifacts:
    paths:
      - build_macos
    expire_in: 1 day

macos-test:
  stage: test
  tags:
    - macos
    - anaconda
  dependencies:
    - macos-build
  needs:
    - job: macos-build
      artifacts: true
  script:
    - cp ./build_macos/lib/*.so ./tracktable/Python/tracktable/lib
    - ./ci/macos/run_test.sh
  artifacts:
    paths:
      - build_macos
    expire_in: 1 day

########################################
# Build And Deploy MacOS PYPI Packages #
########################################
macos-deploy:
  stage: deploy
  tags:
    - macos
    - anaconda
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  timeout: 2 hours
  needs: ["macos-test"]
  script:
    - cd packaging/pypi/osx
    - mkdir wheel_build && cd wheel_build
    - ../build_osx_wheels.sh -j 6 ../../../..
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi *.whl