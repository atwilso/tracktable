Tracktable Release Notes

VERSION 1.0.5, March 2018
-------------------------

This is a bug-fix release.

New features:

* No new features.


Notable bugfixes:

* Writing to files or to file-like objects in Python caused a
  segfault.  See the commit on Feb 21 2018 whose hash begins with
  8db2248d for details.

* C++ headers for convex hulls were not being installed with 'make
  install'.


Outstanding issues:

* Link errors / segfaults under certain OSX configurations, especially
  the Anaconda Python environment.  


VERSION 1.0.4, November 2017
----------------------------

Notable bugfixes:

* References to std::cout are still in Boost's geometry library.  This
  causes compile problems if I don't work around it.
* tracktable.core.Timestamp.from_string() should now honor %z.

New features:

* Trajectories can be written to and read from JSON and Python
  dictionaries.  At the moment this is only present in Python.  Check
  out tracktable.io.read_write_dictionary and
  tracktable.io.read_write_json.  

VERSION 1.0.3, October 2017
---------------------------

Cleanup release.  We've removed the old Python point writers.  These
were made obsolete by the introduction of point domains.

We've also fixed some tests that were failing because of numeric
imprecision.

Copyright notices on all files updated after NTESS replaced Sandia
Corporation (Lockheed Martin) as the operator of Sandia National Labs.


VERSION 1.0.2
-------------

There is no Version 1.0.2.


VERSION 1.0.1, April 2016
-------------------------

New features:

* Convex hull measures for 2D spaces (Cartesian and geographic)
* Support Python 3
* Property values can now be null

Notable bugfixes:

* Minimize calls to std::imbue.  This was 90% or more of the time it took to read trajectories.

VERSION 1.0, January 2016
-------------------------

New features:

* DBSCAN clustering exposed to Python
* RTree spatial index exposed to Python
* Point writers in C++ exposed to Python
* Trajectory writer added to C++
* Named property values can now be integers

Notable bugfixes:

* Python wrappers for feature vectors no longer need quite as much memory at compile time
* Guard against NaN results for math on the sphere
* Timestamps are now interpolated with microsecond resolution

VERSION 0.9, September 2015
---------------------------

First public alpha release.

New features:

* Boost r-tree exposed to C++ and Python for all point types along with common query functions.
* Convenience method tracktable.core.geomath.recompute_speed added since we have to do this so often
* Configurable timestamp input format
* Point writer generalized to work with all domains, output to stream instead of requiring filename
* Add "feature vector" point types (undecorated vectors of doubles) for clustering

Notable bugfixes:

* Length of terrestrial trajectories now returned in kilometers instead of radians

VERSION 0.3, March 2015
-----------------------

Internal release only.

New features:

* Tracktable now builds with Visual Studio!
* Automatic bounding box computation (used for culling during rendering)
* Tests of image generating code now compare against ground truth image

Notable bugfixes:

* Avoid compiler-specific definitions of size_t in favor of std::size_t


VERSION 0.2, December 2014
--------------------------

Internal release only.

New features:

* Allow points in 2D and 3D Cartesian space as well as geographic space
* tracktable.render.mapmaker - convenience calls for many common map use cases
* Delimited text point writer added to Python
* Delimited text point reader added to C++, exposed to Python
* Named properties added to tracktable::Trajectory
* Code in tracktable.examples can now be used as a module
* tracktable::Trajectory can now be used with boost::geometry functions
* Header files install into ${INSTALL}/include/tracktable
* Add DBSCAN clustering code to C++

Notable bugfixes:

* PYTHONPATH was not being set for regression tests.
* CMake install path was not being propagated to all modules.

VERSION 0.1, September 2014
---------------------------

Internal release only: not released to public.

New features:

* Movie-making script can now run in parallel
* Example scripts all use common command-line arguments, including reading arguments from files
* Added timezone support for clock rendering
* Doxygen documentation present but incomplete
* Overall documentation now builds using Sphinx
* Decree: distances shall be specified in kilometers

Notable bugfixes:

* Histogram buckets have reasonable sizes on both small and large maps
* City labels were not rendering near cities
* Radius of the Earth was wrong
* Copyright notice adjusted to use proper Sandia language
* License file for external data cleaned up

VERSION 0, July 2014
----------------------

Initial milestone: not released to public.

New features:

* Points and trajectories in geographic domain implemented in C++ and exposed to Python.
* Math on points and trajectories implemented in C++ and exposed to Python.
* Python script added for movie making on geographic maps.
* Python script added for still images on geographic maps.
* Python scripts for all rendering methods added to examples directory.
